{
  "type": [
    "h-entry"
  ],
  "properties": {
    "author": [
      {
        "type": [
          "h-card"
        ],
        "properties": {
          "url": [
            "/profile/cleverdevil",
            "/profile/cleverdevil"
          ],
          "photo": [
            "/file/e37c3982acf4f0a8421d085b9971cd71/thumb.jpg"
          ],
          "name": [
            "Jonathan LaCour"
          ]
        },
        "value": "Jonathan LaCour"
      }
    ],
    "name": [
      "Publishing Markdown to Micropub Endpoints with Python"
    ],
    "content": [
      {
        "html": "<p>You\u2019re probably sick of my posts about <a href=\"http://indiewebcamp.com/micropub\">Micropub</a> by this point, so I\u2019ll make this my last for a while. Maybe.</p><p>I\u2019m up in Seattle this week on business, and the airplane ride from Los Angeles gave me a chance to play around a bit more with Micropub. I whipped up a quick script that allows for quickly publishing Markdown-formatted content to a Micropub endpoint.</p><p>This very post is published with the script! Micropub inception! Take a look:</p><div class=\"codehilite\"><pre><span class=\"c\">#!/usr/bin/env python</span>\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">A script for quickly publishing blog posts to a Micropub endpoint. To use</span>\n<span class=\"sd\">this script, first ensure that you have installed:</span>\n\n<span class=\"sd\">    PyYAML</span>\n<span class=\"sd\">    requests</span>\n<span class=\"sd\">    markdown</span>\n\n<span class=\"sd\">You will also need to set the following environment variables:</span>\n\n<span class=\"sd\">    INDIEAUTH_TOKEN</span>\n<span class=\"sd\">    MICROPUB_ENDPOINT</span>\n\n<span class=\"sd\">Run the script, and pass it the path to a Markdown-formatted file. YAML</span>\n<span class=\"sd\">formatted front matter can be provided with Micropub arguments such as</span>\n<span class=\"sd\">`name`, `published`, and `slug`.</span>\n<span class=\"sd\">'''</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"o\">,</span> <span class=\"nn\">os</span><span class=\"o\">,</span> <span class=\"nn\">yaml</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span><span class=\"o\">,</span> <span class=\"nn\">markdown</span>\n\n<span class=\"c\"># configuration</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'INDIEAUTH_TOKEN'</span><span class=\"p\">)</span>\n<span class=\"n\">endpoint</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'MICROPUB_ENDPOINT'</span><span class=\"p\">)</span>\n\n<span class=\"c\"># make sure the user has provided adequate information</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">token</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">endpoint</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span> <span class=\"s\">'INDIEAUTH_TOKEN &amp; MICROPUB_ENDPOINT environment variables not set.'</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span> <span class=\"s\">'Usage:'</span>\n    <span class=\"k\">print</span> <span class=\"s\">'    blogit &lt;path to markdown file&gt;'</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c\"># read in the content</span>\n<span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">raw_content</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"c\"># check for front matter</span>\n<span class=\"k\">if</span> <span class=\"n\">raw_content</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s\">'---'</span><span class=\"p\">):</span>\n\n    <span class=\"c\"># parse out the front matter from the raw content</span>\n    <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">front_matter</span><span class=\"p\">,</span> <span class=\"n\">raw_content</span> <span class=\"o\">=</span> <span class=\"n\">raw_content</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">'---'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n    <span class=\"c\"># parse the frontmatter</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">front_matter</span><span class=\"p\">)</span>\n\n<span class=\"c\"># render markdown</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s\">'content'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">markdown</span><span class=\"o\">.</span><span class=\"n\">markdown</span><span class=\"p\">(</span><span class=\"n\">raw_content</span><span class=\"p\">,</span> <span class=\"n\">extensions</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"s\">'markdown.extensions.codehilite'</span><span class=\"p\">,</span>\n    <span class=\"s\">'markdown.extensions.extra'</span><span class=\"p\">,</span>\n    <span class=\"s\">'markdown.extensions.smarty'</span>\n<span class=\"p\">])</span>\n\n<span class=\"c\"># populate remaining details</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s\">'access_token'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">token</span>\n<span class=\"k\">if</span> <span class=\"s\">'h'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s\">'h'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">'entry'</span>\n\n<span class=\"c\"># create the post</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">endpoint</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"c\"># check the result</span>\n<span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span> <span class=\"s\">'Failed to publish post with status code: </span><span class=\"si\">%d</span><span class=\"s\">'</span> <span class=\"o\">%</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span> <span class=\"s\">'Published successfully.'</span>\n</pre></div><p>You\u2019ll note that it supports some Markdown extras, including code highlighting with <a href=\"http://pygments.org\">Pygments</a>, and several other extras.</p><p>Feedback is, of course, welcome. On my flight home, I plan on polishing the script up a bit, making it easy to install, and adding a few options.</p>",
        "value": "You\u2019re probably sick of my posts about Micropub by this point, so I\u2019ll make this my last for a while. Maybe.\nI\u2019m up in Seattle this week on business, and the airplane ride from Los Angeles gave me a chance to play around a bit more with Micropub. I whipped up a quick script that allows for quickly publishing Markdown-formatted content to a Micropub endpoint.\nThis very post is published with the script! Micropub inception! Take a look:#!/usr/bin/env python\n\n'''\nA script for quickly publishing blog posts to a Micropub endpoint. To use\nthis script, first ensure that you have installed:\n\n    PyYAML\n    requests\n    markdown\n\nYou will also need to set the following environment variables:\n\n    INDIEAUTH_TOKEN\n    MICROPUB_ENDPOINT\n\nRun the script, and pass it the path to a Markdown-formatted file. YAML\nformatted front matter can be provided with Micropub arguments such as\n`name`, `published`, and `slug`.\n'''\n\nimport sys, os, yaml\nimport requests, markdown\n\n# configuration\ndata = {}\ntoken = os.environ.get('INDIEAUTH_TOKEN')\nendpoint = os.environ.get('MICROPUB_ENDPOINT')\n\n# make sure the user has provided adequate information\nif not token or not endpoint:\n    print 'INDIEAUTH_TOKEN & MICROPUB_ENDPOINT environment variables not set.'\n    sys.exit(0)\n\nif len(sys.argv) < 2:\n    print 'Usage:'\n    print '    blogit <path to markdown file>'\n    sys.exit(0)\n\n# read in the content\nfilename = sys.argv[1]\nraw_content = open(filename, 'rb').read()\n\n# check for front matter\nif raw_content.startswith('---'):\n\n    # parse out the front matter from the raw content\n    _, front_matter, raw_content = raw_content.split('---', 2)\n\n    # parse the frontmatter\n    data = yaml.load(front_matter)\n\n# render markdown\ndata['content'] = markdown.markdown(raw_content, extensions=[\n    'markdown.extensions.codehilite',\n    'markdown.extensions.extra',\n    'markdown.extensions.smarty'\n])\n\n# populate remaining details\ndata['access_token'] = token\nif 'h' not in data:\n    data['h'] = 'entry'\n\n# create the post\nresult = requests.post(endpoint, data=data)\n\n# check the result\nif result.status_code not in (200, 201):\n    print 'Failed to publish post with status code: %d' % result.status_code\n    sys.exit(1)\n\nprint 'Published successfully.'\n\nYou\u2019ll note that it supports some Markdown extras, including code highlighting with Pygments, and several other extras.\nFeedback is, of course, welcome. On my flight home, I plan on polishing the script up a bit, making it easy to install, and adding a few options."
      }
    ],
    "url": [
      "/2015/publishing-markdown-to-micropub-endpoints-with-python"
    ],
    "published": [
      "2015-08-14T01:32:57+0000"
    ],
    "post-kind": [
      "Entry"
    ],
    "post-id": [
      "4f8fa5c0d3c8c9cf7187a426b20e8e66"
    ]
  }
}